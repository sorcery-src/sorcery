@use "../configuration" as conf;
@use "../generators" as gen;
@use "../getters" as get;
@use "../utils";

@use "../mixins" as mx;

// prettier-ignore
$-translate-range: (
	-100,
	 -50,
	   0,
	  50,
	 100,
);

// TODO: Use `percent-range`?
//
// prettier-ignore
$-scale-range: (
	0, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5, 0.6, 0.7, 0.75, 0.8, 0.9, 1,
	1.1, 1.2, 1.25, 1.3, 1.4, 1.5, 1.6, 1.7, 1.75, 1.8, 1.9, 2,
);

$-origin-opts: (
	top: top,
	top-right: top right,
	right: right,
	bottom-right: bottom right,
	bottom: bottom,
	bottom-left: bottom left,
	left: left,
	top-left: top left,
	center: center,
);

@mixin transform($variants...) {
	@each $variant in $variants {
		.transform {
			@include mx.variants($variant) {
				--transform-translate-x: 0;
				--transform-translate-y: 0;
				--transform-scale: 1;
				transform: translate(var(--transform-translate-x), var(--transform-translate-y)) scale(var(--transform-scale));
			}
		}

		.transform-gpu {
			@include mx.variants($variant) {
				--transform-translate-x: 0;
				--transform-translate-y: 0;
				--transform-scale: 1;
				transform: translate3d(var(--transform-translate-x), var(--transform-translate-y), 0)
					scale(var(--transform-scale));
			}
		}

		@each $axis in (x, y) {
			@each $rv in $-translate-range {
				.#{get.n($rv)}translate-#{$axis}-#{abs($rv)} {
					@include mx.variants($variant) {
						--transform-translate-#{$axis}: #{$rv + "%"};
					}
				}
			}
		}

		@each $rv in $-scale-range {
			.scale-#{get.abs($rv * 100)} {
				@include mx.variants($variant) {
					--transform-scale: #{$rv};
				}
			}
		}

		@each $mk, $mv in $-origin-opts {
			.origin-#{$mk} {
				@include mx.variants($variant) {
					transform-origin: $mv;
				}
			}
		}
	}
}
