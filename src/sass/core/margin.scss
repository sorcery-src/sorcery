@use "../configuration" as conf;
@use "../getters" as get;
@use "../mixins";
@use "../utils";

// prettier-ignore
@mixin margin($variants...) {
	@include mixins.compose($variants) using ($composed) {
		// @if utils.matches($composed, core) { // Takes precedence so can be overridden
		// 	.m-space { margin: var(--dm-space); }
		// 	.mx-space {
		// 		margin-left: var(--dm-space);
		// 		margin-right: var(--dm-space);
		// 	}
		// 	.my-space {
		// 		margin-top: var(--dm-space);
		// 		margin-bottom: var(--dm-space);
		// 	}
		// 	.mt-space { margin-top: var(--dm-space); }
		// 	.mr-space { margin-right: var(--dm-space); }
		// 	.mb-space { margin-bottom: var(--dm-space); }
		// 	.ml-space { margin-left: var(--dm-space); }
		// }

		@include mixins.generate-from-range((
			composed: $composed,
			shorthand: m,
			property: (margin),
			range: utils.list-of(get.nspaces(), auto, get.spaces()),
			resolver: rem,
		));
		@include mixins.generate-from-range((
			composed: $composed,
			shorthand: mx,
			property: (margin-left, margin-right),
			range: utils.list-of(get.nspaces(), auto, get.spaces()),
			resolver: rem,
		));
		@include mixins.generate-from-range((
			composed: $composed,
			shorthand: my,
			property: (margin-top, margin-bottom),
			range: utils.list-of(get.nspaces(), auto, get.spaces()),
			resolver: rem,
		));
		@include mixins.generate-from-range((
			composed: $composed,
			shorthand: mt,
			property: (margin-top),
			range: utils.list-of(get.nspaces(), auto, get.spaces()),
			resolver: rem,
		));
		@include mixins.generate-from-range((
			composed: $composed,
			shorthand: mr,
			property: (margin-right),
			range: utils.list-of(get.nspaces(), auto, get.spaces()),
			resolver: rem,
		));
		@include mixins.generate-from-range((
			composed: $composed,
			shorthand: mb,
			property: (margin-bottom),
			range: utils.list-of(get.nspaces(), auto, get.spaces()),
			resolver: rem,
		));
		@include mixins.generate-from-range((
			composed: $composed,
			shorthand: ml,
			property: (margin-left),
			range: utils.list-of(get.nspaces(), auto, get.spaces()),
			resolver: rem,
		));
	}
}
