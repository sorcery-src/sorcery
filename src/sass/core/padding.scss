@use "../configuration" as conf;
@use "../getters" as get;
@use "../mixins";
@use "../utils";

// prettier-ignore
@mixin padding($variants...) {
	@include mixins.compose($variants) using ($composed) {
		@if utils.matches($composed, core) { // Takes precedence so can be overridden
			.p-space { padding: var(--dm-space); }
			.px-space {
				padding-left: var(--dm-space);
				padding-right: var(--dm-space);
			}
			.py-space {
				padding-top: var(--dm-space);
				padding-bottom: var(--dm-space);
			}
			.pt-space { padding-top: var(--dm-space); }
			.pr-space { padding-right: var(--dm-space); }
			.pb-space { padding-bottom: var(--dm-space); }
			.pl-space { padding-left: var(--dm-space); }
		}

		@include mixins.generate-from-range((
			composed: $composed,
			shorthand: p,
			property: (padding),
			range: get.spaces(),
			resolver: rem,
		));
		@include mixins.generate-from-range((
			composed: $composed,
			shorthand: px,
			property: (padding-left, padding-right),
			range: get.spaces(),
			resolver: rem,
		));
		@include mixins.generate-from-range((
			composed: $composed,
			shorthand: py,
			property: (padding-top, padding-bottom),
			range: get.spaces(),
			resolver: rem,
		));
		@include mixins.generate-from-range((
			composed: $composed,
			shorthand: pt,
			property: (padding-top),
			range: get.spaces(),
			resolver: rem,
		));
		@include mixins.generate-from-range((
			composed: $composed,
			shorthand: pr,
			property: (padding-right),
			range: get.spaces(),
			resolver: rem,
		));
		@include mixins.generate-from-range((
			composed: $composed,
			shorthand: pb,
			property: (padding-bottom),
			range: get.spaces(),
			resolver: rem,
		));
		@include mixins.generate-from-range((
			composed: $composed,
			shorthand: pl,
			property: (padding-left),
			range: get.spaces(),
			resolver: rem,
		));
	}
}
