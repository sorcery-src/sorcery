@use "sass:list";
@use "sass:map";
@use "sass:meta";

@use "../getters" as get;
@use "../mixins" as mix;
@use "resolvers" as rs;

// Ex:
//
// (0, 0.5, 1)  -> true
// (0, 50, 100) -> false
//
// prettier-ignore
@function percent-heuristic($range) {
	$ok: $range and
		meta.type-of(list.nth($range, 1)) == number and
		list.nth($range, 1) >= -1 and
		meta.type-of(list.nth($range, -1)) == number and
		list.nth($range, -1) <= 1;
	@return $ok;
}

// prettier-ignore
@mixin generate-from-range($info-map) {
	$variant:   map.get($info-map, variant);
	$shorthand: map.get($info-map, shorthand);
	$property:  map.get($info-map, property);
	$range:     map.get($info-map, range);
	$resolver:  map.get($info-map, resolver);

	// Computed:
	$as-percent: percent-heuristic($range);

	@each $rv in $range {
		.#{get.n($rv)}#{$shorthand}-#{get.desc(get.abs($rv), $as-percent)} {
			@include mix.variants($variant) {
				@each $prop in $property {
					#{$prop}: rs.resolve($rv, $resolver);
				}
			}
		}
	}
}
