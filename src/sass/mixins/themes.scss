@use "sass:map";

// TODO: Right now, `$duration` must be described in duration units.
// In the future, it would be preferable to be able to describe `$duration`
// as a unitless number.
//
// Based on https://codepen.io/zaydek/pen/wvzyENQ.
//
// prettier-ignore
@mixin themes($info-map) {
	$light:    map.get($info-map, light);
	$dark:     map.get($info-map, dark);
	$duration: map.get($info-map, duration);
	$timing:   map.get($info-map, timing);

	:root {
		@each $mk, $mv in $light {
			--#{$mk}: #{$mv};
		}
		--default-theme-transition-duration: #{$duration};
		--default-theme-transition-timing: #{$timing};
	}

	:root[data-theme="dark"] {
		@each $mk, $mv in $dark {
			--#{$mk}: #{$mv};
		}
	}

	@if $duration and $timing {
		:root {
			transition: var(--theme-transition);
		}
		[class*="border-"] {
			transition: var(--theme-transition);
		}
	}
}

// Ex:
//
// .clsx {
//   @include theme-transition {
//     // ...
//   }
// }
//
// -> .clsx {
// ->   // ...
// ->   transition: var(--theme-transition);
// -> }
//
@mixin theme-transition {
	@content;
	transition: var(--theme-transition);
}

@mixin theme-variants($variants...) {
	$negate-selector: "";
	@each $variant in $variants {
		$negate-selector: $negate-selector +
			if($negate-selector == "", "", ", ") +
			":root:not([data-theme-effect]) " +
			selector.append(&, ":" + $variant);
	}

	$selector: "";
	@each $variant in $variants {
		$selector: $selector + if($selector == "", "", ", ") + selector.append(&, ":" + $variant);
	}

	@at-root {
		// Opts-in to theme-transitioning.
		& {
			// transition: var(--theme-transition);
			@include theme-transition {
			}
		}
		// Opts-out of theme-transitioning.
		#{$negate-selector} {
			transition: $x-duration background-color var(--ease-out);
		}
		#{$selector} {
			@content;
		}
	}
}
