@use "sass:map";
@use "sass:selector";

@use "../configuration" as conf;
@use "../utils";

// TODO: Right now, `$duration` must be described in duration units.
// In the future, it would be preferable to be able to describe `$duration`
// as a unitless number.
//
// This line of reasoning should also extend to `$timing`, so that
// `timing: ease-out` works, too.
//
// Based on https://codepen.io/zaydek/pen/GRjxyrm.
//
// prettier-ignore
@mixin themes($theme-map, $duration, $timing) {
	$light: map.get($theme-map, light);
	$dark:  map.get($theme-map, dark);

	:root {
		@each $mk, $mv in $light {
			--#{$mk}: #{$mv};
		}
		--default-theme-transition-duration: #{$duration};
		--default-theme-transition-timing: #{$timing};
	}

	:root[data-theme="dark"] {
		@each $mk, $mv in $dark {
			--#{$mk}: #{$mv};
		}
	}

	@if $duration and $timing {
		:root {
			transition: var(--theme-transition);
		}
		[class*="border-"] {
			transition: var(--theme-transition);
		}
	}
}

// Ex:
//
// .clsx {
//   @include theme-transition {
//     ...
//   }
// }
//
// -> .clsx {
// ->   ...
// ->   transition: var(--theme-transition);
// -> }
//
@mixin theme-transition {
	@content;
	transition: var(--theme-transition);
}

// Ex:
//
// .x-hoverable {
//   @include theme-variants(hover) {
//     ...
//   }
// }
//
// -> .x-hoverable {
// ->   transition: var(--theme-transition);
// -> }
// ->
// -> :root:not([data-theme-effect]) .x-hoverable:hover {
// ->   transition: 250ms background-color var(--ease-out);
// -> }
// ->
// -> .x-hoverable:hover {
// ->   ...
// -> }
//
@mixin theme-variants($variants, $duration, $timing) {
	// This is the primary selector.
	$primary-selector: "";
	@each $variant in $variants {
		$primary-selector: $primary-selector + if($primary-selector == "", "", ", ") + selector.append(&, ":" + $variant);
	}

	// This is the negated selector; negates `:root:data([data-theme-effect])`.
	$negate-selector: "";
	@each $variant in $variants {
		$negate-selector: $negate-selector + if($negate-selector == "", "", ", ") + ":root:not([data-theme-effect]) " + &;
	}

	@at-root {
		// Opts-in to theme-transitioning.
		& {
			// prettier-ignore
			@include theme-transition {}
		}
		// Opts-out of theme-transitioning.
		#{$negate-selector} {
			transition: utils.build-transition(conf.$transition-props, $duration, $timing);
		}
		#{$primary-selector} {
			@content;
		}
	}
}
