@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

@use "../configuration" as conf;
@use "../getters" as get;
@use "../utils";

// Ex: ".class" -> "class"
@function str-declass($selector) {
	$str-selector: "" + $selector;
	@return string.slice($str-selector, 2);
}

// Ex: ".sm\\: .class" -> ".sm\\:class"
@function str-declass-responsive($selector) {
	$str-selector: "" + $selector;

	// Edge case:
	//
	// .sm\: :not([data-theme-effect]) .transition
	// -> .sm\: .transition                           (1)
	// -> :not([data-theme-effect]) .sm\: .transition (2)
	// -> :not([data-theme-effect]) .sm\:transition   (3)
	//
	@if utils.str-ends-with($str-selector, ":not([data-theme-effect]) .transition") {
		// prettier-ignore
		$str-selector: utils.str-replace(
			$str-selector,
			"#{get.delimiter()} :not([data-theme-effect])",
			get.delimiter()
		);
		$str-selector: ":not([data-theme-effect]) #{$str-selector}";
	}
	@return utils.str-replace($str-selector, "#{get.delimiter()} .", get.delimiter());
}

@function core($selector) {
	@return $selector;
}
@function hover($selector) {
	@return ".hover#{get.delimiter()}#{str-declass($selector)}:hover";
}
@function focus($selector) {
	@return ".focus#{get.delimiter()}#{str-declass($selector)}:focus";
}
// prettier-ignore
@function touch($selector) {
	@return ".touch#{get.delimiter()}#{str-declass($selector)}:hover, " +
		".touch#{get.delimiter()}#{str-declass($selector)}:focus";
}
@function group-hover($selector) {
	@return ".group\:hover .group-hover#{get.delimiter()}#{str-declass($selector)}";
}
@function group-focus($selector) {
	@return ".group\:focus .group-focus#{get.delimiter()}#{str-declass($selector)}";
}
// prettier-ignore
@function group-touch($selector) {
	@return ".group\:hover .group-touch#{get.delimiter()}#{str-declass($selector)}, " +
		".group\:focus .group-touch#{get.delimiter()}#{str-declass($selector)}";
}

// Ex:
//
// .class { @include variants(...) { ... } }
//
// -> .class { ... }
// -> .hover\:class { ... }
// -> .focus\:class { ... }
//
@mixin -impl-dev($variants...) {
	@each $variant in $variants {
		$selector: meta.call(meta.get-function($variant), &);
		#{$selector} {
			@content;
		}
	}
}

// Ex:
//
// .class { @include variants(...) { ... } }
//
// -> .class,
// -> .hover\:class,
// -> .focus\:class { ... }
//
@mixin -impl-prod($variants...) {
	$concat-selector: "";
	@each $variant in $variants {
		$selector: meta.call(meta.get-function($variant), &);
		$concat-selector: $concat-selector + if($concat-selector == "", "", ", ") + $selector;
	}
	#{$concat-selector} {
		@content;
	}
}

// TODO: Needs to support `:not([data-theme-effect]) .transition` edge case.
// Maybe we take the nth component of the selector and use that.
@mixin variants($variants...) {
	@at-root {
		$taken: utils.take($variants, responsive);
		@if list.length($taken) > 0 {
			@if conf.$env == development {
				@include -impl-dev($taken...) {
					@content;
				}
			} @else if conf.$env == production {
				@include -impl-prod($taken...) {
					@content;
				}
			}
		}
		@if list.index($variants, responsive) {
			#{str-declass-responsive(&)} {
				@content;
			}
		}
	}
}
