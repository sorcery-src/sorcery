@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

@use "../configuration" as conf;
@use "../getters" as get;
@use "../utils";

// Ex: ".class" -> "class"
@function str-declass($selector) {
	$str-selector: "" + $selector;
	@return string.slice($str-selector, 2);
}

// Ex: ".sm\\: .class" -> ".sm\\:class"
@function str-declass-responsive($selector) {
	$str-selector: "" + $selector;

	// Edge case:
	//
	// .sm\: :root:not([data-theme-effect]) .transition
	//
	// -> .sm\: .transition                                (1)
	// -> :root:not([data-theme-effect]) .sm\: .transition (2)
	// -> :root:not([data-theme-effect]) .sm\:transition   (3)
	//
	// TODO: https://github.com/zaydek/duomo/issues/244.
	@if utils.str-ends-with($str-selector, ":root:not([data-theme-effect]) .transition") {
		// prettier-ignore
		$str-selector: utils.str-replace(
			$str-selector,
			"#{get.delimiter()} :root:not([data-theme-effect])",
			get.delimiter()
		);
		$str-selector: ":root:not([data-theme-effect]) #{$str-selector}";
	}
	@return utils.str-replace($str-selector, "#{get.delimiter()} .", get.delimiter());
}

@function core($selector) {
	@return ".#{$selector}";
}

@function hover($selector) {
	@return ".hover\\:#{$selector}:hover";
}

@function focus($selector) {
	@return ".focus\\:#{$selector}:focus";
}

// prettier-ignore
@function touch($selector) {
	@return ".touch\\:#{$selector}:hover, "+
		".touch\\:#{$selector}:focus";
}

@function group-hover($selector) {
	@return ".group:hover .group-hover\\:#{$selector}";
}

@function group-focus($selector) {
	@return ".group:focus .group-focus\\:#{$selector}";
}

// prettier-ignore
@function group-touch($selector) {
	@return ".group:hover .group-touch\\:#{$selector}, "+
		".group:focus .group-touch\\:#{$selector}";
}

// @function responsive($selector) {
// 	@return "#{&}#{$selector}";
// }

// Ex:
//
// .class { @include variants(...) { ... } }
//
// -> .class { ... }
// -> .hover\:class { ... }
// -> .focus\:class { ... }
//
@mixin -ungroup-selectors($ampersand, $variants...) {
	@each $variant in $variants {
		$selector: meta.call(meta.get-function($variant), str-declass($ampersand));
		#{$selector} {
			@content;
		}
	}
}

// Ex:
//
// .class { @include variants(...) { ... } }
//
// -> .class,
// -> .hover\:class,
// -> .focus\:class { ... }
//
@mixin -group-selectors($ampersand, $variants...) {
	$selector: "";
	@each $variant in $variants {
		$selector: $selector +
			if($selector == "", "", ", ") +
			meta.call(meta.get-function($variant), str-declass($ampersand));
	}
	#{$selector} {
		@content;
	}
}

@mixin variants($variants...) {
	// TODO
	// @if list.length($variants) == 0 {
	// 	// prettier-ignore
	// 	$variants: (core,);
	// }
	@at-root {
		$taken: utils.take($variants, responsive);
		@if list.length($taken) > 0 {
			@if conf.$env == development {
				@include -ungroup-selectors(&, $taken...) {
					@content;
				}
			} @else if conf.$env == production {
				@include -group-selectors(&, $taken...) {
					@content;
				}
			}
		}
		@if list.index($variants, responsive) {
			#{str-declass-responsive(&)} {
				@content;
			}
		}
	}
}

// Ex:
//
// @include compose($variants) using ($v) {
//   .bg-red-400 { @include variants($v) { ... } }
//   .bg-red-400 { @include variants($v) { ... } }
//   .bg-red-600 { @include variants($v) { ... } }
// }
//
// -> .bg-red-400 { ... }
// -> .bg-red-400 { ... }
// -> .bg-red-600 { ... }
// -> .hover\:bg-red-400:hover { ... }
// -> .hover\:bg-red-400:hover { ... }
// -> .hover\:bg-red-600:hover { ... }
//
@mixin compose($variants) {
	@if conf.$env == development {
		@each $variant in $variants {
			@content ($variant);
		}
	} @else if conf.$env == production {
		@content ($variants);
	}
}
