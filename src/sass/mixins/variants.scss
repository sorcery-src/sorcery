@use "sass:list";
@use "sass:meta";
@use "sass:selector";
@use "sass:string";

@use "../configuration" as conf;
@use "../getters" as get;
@use "../utils";

// // Ex: ".class" -> "class"
// //
// // TODO: Extract to `utils` or `str`.
// // TODO: Add unit tests.
// @function str-declass($original-selector) {
// 	$selectors: selector.parse($original-selector);
// 	$out: ();
// 	@each $selector in $selectors {
// 		$str: "" + $selector;
// 		$declassed: string.slice($str, 2);
// 		$out: list.append($out, $declassed, comma);
// 	}
// 	@return $out;
// }

// Ex: ".class" -> "class"
//
// TODO: Extract to `utils` or `str`.
// TODO: Add unit tests.
@function str-declass($selector) {
	$str-selector: "" + $selector;
	@return string.slice($str-selector, 2);
}

// Ex: ".sm\\: .class" -> ".sm\\:class"
//
// TODO: Extract to `utils` or `str`.
// TODO: Add unit tests.
@function str-declass-responsive($original-selector) {
	$selectors: selector.parse($original-selector);
	$out: ();
	@each $selector in $selectors {
		// Edge case:
		//
		// .sm\: :root:not([data-theme-effect]) .transition
		//
		// -> .sm\: .transition                                (1)
		// -> :root:not([data-theme-effect]) .sm\: .transition (2)
		// -> :root:not([data-theme-effect]) .sm\:transition   (3)
		//
		// TODO: https://github.com/zaydek/duomo/issues/244.
		$str: "" + $selector;
		@if utils.str-ends-with($str, ":root:not([data-theme-effect]) .transition") {
			// prettier-ignore
			$str: utils.str-replace(
				$str,
				"#{get.delimiter()} :root:not([data-theme-effect])",
				get.delimiter()
			);
			$str: ":root:not([data-theme-effect]) #{$str}";
		}
		$declassed: utils.str-replace($str, "#{get.delimiter()} .", get.delimiter());
		$out: list.append($out, $declassed, comma);
	}
	@return $out;
}

@function core($selector) {
	@return ".#{$selector}";
}

@function hover($selector) {
	@return ".hover\\:#{$selector}:hover";
}

@function focus($selector) {
	@return ".focus\\:#{$selector}:focus";
}

// prettier-ignore
@function touch($selector) {
	@return ".touch\\:#{$selector}:hover, "+
		".touch\\:#{$selector}:focus";
}

@function group-hover($selector) {
	@return ".group:hover .group-hover\\:#{$selector}";
}

@function group-focus($selector) {
	@return ".group:focus .group-focus\\:#{$selector}";
}

// prettier-ignore
@function group-touch($selector) {
	@return ".group:hover .group-touch\\:#{$selector}, "+
		".group:focus .group-touch\\:#{$selector}";
}

// @function responsive($selector) {
// 	@return "#{&}#{$selector}";
// }

// Ex:
//
// .class { @include variants(...) { ... } }
//
// -> .class { ... }
// -> .hover\:class { ... }
// -> .focus\:class { ... }
//
@mixin -ungroup-selectors($ampersand, $variants...) {
	@each $variant in $variants {
		$selector: meta.call(meta.get-function($variant), str-declass($ampersand));
		#{$selector} {
			@content;
		}
	}
}

// Ex:
//
// .class { @include variants(...) { ... } }
//
// -> .class,
// -> .hover\:class,
// -> .focus\:class { ... }
//
@mixin -group-selectors($ampersand, $variants...) {
	$selector: "";
	@each $variant in $variants {
		$selector: $selector +
			if($selector == "", "", ", ") +
			meta.call(meta.get-function($variant), str-declass($ampersand));
	}
	#{$selector} {
		@content;
	}
}

@mixin variants($variants...) {
	// TODO
	// @if list.length($variants) == 0 {
	// 	// prettier-ignore
	// 	$variants: (core,);
	// }
	@at-root {
		$taken: utils.take($variants, responsive);
		@if list.length($taken) > 0 {
			@if conf.$env == development {
				@include -ungroup-selectors(&, $taken...) {
					@content;
				}
			} @else if conf.$env == production {
				@include -group-selectors(&, $taken...) {
					@content;
				}
			}
		}
		@if list.index($variants, responsive) {
			#{str-declass-responsive(&)} {
				@content;
			}
		}
	}
}
