@use "../configuration" as conf;
@use "../getters" as get;
@use "../mixins";
@use "../utils";

// prettier-ignore
$-justify-content-opts: (
	justify-stretch: stretch,
	justify-start: flex-start,
	justify-center: center,
	justify-end: flex-end,
	justify-baseline: baseline,
);

// prettier-ignore
$-justify-self-opts: (
	justify-self-stretch: stretch,
	justify-self-start: flex-start,
	justify-self-center: center,
	justify-self-end: flex-end,
	justify-self-baseline: baseline,
);

// prettier-ignore
$-align-items-opts: (
	align-stretch: stretch,
	align-start: flex-start,
	align-center: center,
	align-end: flex-end,
	align-baseline: baseline,
);

// prettier-ignore
$-align-self-opts: (
	align-self-stretch: stretch,
	align-self-start: flex-start,
	align-self-center: center,
	align-self-end: flex-end,
	align-self-baseline: baseline,
);

// prettier-ignore
$-flex-wrap-opts: (
	wrap: wrap,
	wrap-reverse: wrap-reverse,
	wrap-none: nowrap,
);

@mixin -modifiers($variants...) {
	@include mixins.compose($variants) using ($composed) {
		/*
		 * <... justify-*>
		 */

		@each $mk, $mv in $-justify-content-opts {
			.#{$mk} {
				@include mixins.variants($composed...) {
					justify-content: $mv;
				}
			}
		}

		/*
		 * <... justify-self-*>
		 */

		@each $mk, $mv in $-justify-self-opts {
			.#{$mk} {
				@include mixins.variants($composed...) {
					justify-self: $mv;
				}
			}
		}

		/*
		 * <... align-*>
		 */

		@each $mk, $mv in $-align-items-opts {
			.#{$mk} {
				@include mixins.variants($composed...) {
					align-items: $mv;
				}
			}
		}

		/*
		 * <... align-self-*>
		 */

		@each $mk, $mv in $-align-self-opts {
			.#{$mk} {
				@include mixins.variants($composed...) {
					align-self: $mv;
				}
			}
		}

		/*
		 * <... wrap-*>
		 */

		@each $mk, $mv in $-flex-wrap-opts {
			.#{$mk} {
				@include mixins.variants($composed...) {
					flex-wrap: $mv;
				}
			}
		}
	}
}

// Stacks are a lightweight abstraction on top of Flexbox inspired by SwiftUI.
//
// This implementation was originally inspired by several works:
//
// - https://almonk.github.io/pylon
// - https://youtube.com/watch?v=fvOlTDJpNcM
//
// Based on https://codepen.io/zaydek/pen/wvzyZWy.
@mixin flex-stack($variants...) {
	@include mixins.compose($variants) using ($composed) {
		/*
		 * <hstack>
		 */

		// NOTE: Reset takes precedence.
		@if utils.matches($composed, core) {
			.hstack > * {
				// Compensate for `flex-basis: var(--dm-space)`; `min-width` does not measure `flex-basis`.
				// Only HStacks implement `min-width: min-content`.
				// Therefore VStacks implement `--dm-spacer-min-width: 0`.
				--dm-spacer-min-width: var(--dm-space);
				--dm-space: revert;
			}
		}

		// (Core)
		@if utils.matches($composed, core) {
			.hstack {
				// Shrinkable (responsive) by default.
				flex-shrink: revert; // (See `w-*` and `h-*`)

				// Stretch on the cross-axis.
				align-self: stretch;

				// Center children.
				display: flex;
				flex-direction: row;
				justify-content: center;
				align-items: center;

				// For `overflow-x-scroll`.
				min-width: min-content;
			}
		}

		// (Responsive)
		@if not utils.matches($composed, core) {
			.hstack {
				@include mixins.variants($composed...) {
					flex-direction: row;
					min-width: min-content;
				}
			}
		}

		.hstack > * + * {
			@include mixins.variants($composed...) {
				margin-top: revert;
				margin-left: var(--dm-space);
			}
		}

		/*
		 * <vstack>
		 */

		// NOTE: Reset takes precedence.
		@if utils.matches($composed, core) {
			.vstack > * {
				// See note in `.hstack > *`.
				--dm-spacer-min-width: revert;
				--dm-space: revert;
			}
		}

		// (Core)
		@if utils.matches($composed, core) {
			.vstack {
				// Shrinkable (responsive) by default.
				flex-shrink: revert; // (See `w-*` and `h-*`)

				// Stretch on the cross-axis.
				align-self: stretch;

				// Center children.
				display: flex;
				flex-direction: column;
				justify-content: center;
				align-items: center;

				// For `overflow-x-scroll`.
				min-width: revert;
			}
		}

		// (Responsive)
		@if not utils.matches($composed, core) {
			.vstack {
				@include mixins.variants($composed...) {
					flex-direction: column;
					min-width: revert;
				}
			}
		}

		.vstack > * + * {
			@include mixins.variants($composed...) {
				margin-left: revert;
				margin-top: var(--dm-space);
			}
		}

		/*
		 * <... space-*>
		 */

		// NOTE: Cannot use a generator because of `... > *` selector.
		@each $rv in utils.list-of(get.nspaces(), get.spaces()) {
			.#{get.n($rv)}space-#{get.abs($rv)} > * {
				@include mixins.variants($composed...) {
					--dm-space: #{utils.rem($rv)};
				}
			}
		}

		/*
		 * <spacer>
		 */

		@if utils.matches($composed, core) {
			// Spacers are collapsible to `var(--dm-space)`.
			//
			// NOTE: `min-width: min-content` (from `.hstack`) does not measure `flex-basis: var(--dm-space)`.
			// Therefore use `min-width: var(--dm-spacer-min-width)`.
			.spacer {
				flex: 1 0 var(--dm-space);
				min-width: var(--dm-spacer-min-width); // Needed for `overflow-x-scroll`
			}
			// These spaces are collapsible to `0`.
			.spacer:first-child,
			.spacer:empty + .spacer:empty,
			.spacer:last-child {
				flex: 1 0 0;
				min-width: 0; // Needed for `overflow-x-scroll`
			}
		}
	}

	@include -modifiers($variants...);
}
