@use "../configuration" as conf;
@use "../getters" as get;
@use "../mixins";
@use "../utils";

// Stacks are a lightweight abstraction on top of Flexbox inspired by SwiftUI.
//
// This implementation was originally inspired by several works:
//
// - https://almonk.github.io/pylon
// - https://youtube.com/watch?v=fvOlTDJpNcM
//
// Based on https://codepen.io/zaydek/pen/wvzyZWy.
@mixin flex-stack($variants...) {
	@each $variant in $variants {
		/*
		 * <hstack>
		 */

		// NOTE: Reset take precedence.
		@if utils.matches($variant, core) {
			.hstack > * {
				// Compensate for `flex-basis: var(--dm-space)`; `min-width` does not measure `flex-basis`.
				// Only HStacks implement `min-width: min-content`.
				// Therefore VStacks implement `--dm-spacer-min-width: 0`.
				--dm-spacer-min-width: var(--dm-space);
				--dm-space: 0; // Reset
			}
		}

		.hstack {
			@include mixins.variants($variant) {
				display: flex;
				flex-direction: row;
				justify-content: center;
				align-items: center;
				min-width: min-content; // Needed for `overflow-x-scroll`
			}
		}

		.hstack > * + * {
			@include mixins.variants($variant) {
				margin-top: 0; // Reset
				margin-left: var(--dm-space);
			}
		}

		/*
		 * <vstack>
		 */

		// NOTE: Reset take precedence.
		@if utils.matches($variant, core) {
			.vstack > * {
				// See note in `.hstack > *`.
				--dm-spacer-min-width: 0; // Reset
				--dm-space: 0; // Reset
			}
		}

		.vstack {
			@include mixins.variants($variant) {
				display: flex;
				flex-direction: column;
				justify-content: center;
				align-items: center;
				min-width: auto; // Needed for `overflow-x-scroll`
			}
		}

		.vstack > * + * {
			@include mixins.variants($variant) {
				margin-left: 0; // Reset
				margin-top: var(--dm-space);
			}
		}

		/*
		 * <... space-*>
		 */

		// NOTE: Cannot use a generator because of `... > *` selector.
		@each $rv in utils.list-of(get.nspaces(), get.spaces()) {
			.#{get.n($rv)}space-#{get.abs($rv)} > * {
				@include mixins.variants($variant) {
					--dm-space: #{utils.rem($rv)};
				}
			}
		}

		/*
		 * <spacer>
		 */

		@if utils.matches($variant, core) {
			// Spacers are collapsible to `var(--dm-space)`.
			//
			// NOTE: `min-width: min-content` (from `.hstack`) does not measure `flex-basis: var(--dm-space)`.
			// Therefore use `min-width: var(--dm-spacer-min-width)`.
			.spacer {
				flex: 1 0 var(--dm-space);
				min-width: var(--dm-spacer-min-width); // Needed for `overflow-x-scroll`
			}
			// These spaces are collapsible to `0`.
			.spacer:first-child,
			.spacer:empty + .spacer:empty,
			.spacer:last-child {
				flex: 1 0 0;
				min-width: 0; // Needed for `overflow-x-scroll`
			}
		}
	}
}
