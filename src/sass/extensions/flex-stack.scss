@use "../configuration" as conf;
@use "../getters" as get;
@use "../mixins";
@use "../utils";

// prettier-ignore
$-justify-content-opts: (
	justify-stretch: stretch,
	justify-start: flex-start,
	justify-center: center,
	justify-end: flex-end,
	justify-baseline: baseline,
);

// prettier-ignore
$-justify-self-opts: (
	justify-self-stretch: stretch,
	justify-self-start: flex-start,
	justify-self-center: center,
	justify-self-end: flex-end,
	justify-self-baseline: baseline,
);

// prettier-ignore
$-align-items-opts: (
	align-stretch: stretch,
	align-start: flex-start,
	align-center: center,
	align-end: flex-end,
	align-baseline: baseline,
);

// prettier-ignore
$-align-self-opts: (
	align-self-stretch: stretch,
	align-self-start: flex-start,
	align-self-center: center,
	align-self-end: flex-end,
	align-self-baseline: baseline,
);

// prettier-ignore
$-flex-wrap-opts: (
	wrap: wrap,
	wrap-reverse: wrap-reverse,
	wrap-none: nowrap,
);

@mixin -modifiers($variants...) {
	@include mixins.compose($variants) using ($composed) {
		/*
		 * <... justify-*>
		 */

		@each $mk, $mv in $-justify-content-opts {
			.#{$mk} {
				@include mixins.variants($composed...) {
					justify-content: $mv;
				}
			}
		}

		/*
		 * <... justify-self-*>
		 */

		@each $mk, $mv in $-justify-self-opts {
			.#{$mk} {
				@include mixins.variants($composed...) {
					justify-self: $mv;
				}
			}
		}

		/*
		 * <... align-*>
		 */

		@each $mk, $mv in $-align-items-opts {
			.#{$mk} {
				@include mixins.variants($composed...) {
					align-items: $mv;
				}
			}
		}

		/*
		 * <... align-self-*>
		 */

		@each $mk, $mv in $-align-self-opts {
			.#{$mk} {
				@include mixins.variants($composed...) {
					align-self: $mv;
				}
			}
		}

		/*
		 * <... wrap-*>
		 */

		@each $mk, $mv in $-flex-wrap-opts {
			.#{$mk} {
				@include mixins.variants($composed...) {
					flex-wrap: $mv;
				}
			}
		}
	}
}

// This implementation was originally inspired by several works:
//
// - https://almonk.github.io/pylon
// - https://youtube.com/watch?v=fvOlTDJpNcM
//
// Reference implementation: https://codepen.io/zaydek/pen/wvzyZWy.
@mixin flex-stack($variants...) {
	@include mixins.compose($variants) using ($composed) {
		/*
		 * <hstack>
		 */

		// (Core)
		@if utils.matches($composed, core) {
			// prettier-ignore
			.hstack {
				justify-self: stretch;   // Stretch on the main-axis
				align-self: stretch;     // Stretch on the cross-axis

				display: flex;           // Use Flexbox
				flex-direction: row;     // Flexbox as row
				justify-content: center; // Center children along the main-axis
				align-items: center;     // Center children along the cross-axis

				// For `.overflow-x-scroll`.
				min-width: min-content;
			}
		}

		// (Responsive)
		@if not utils.matches($composed, core) {
			.hstack {
				@include mixins.variants($composed...) {
					flex-direction: row;
				}
			}
		}

		@if utils.matches($composed, core) {
			.hstack > * {
				// NOTE: `revert` does not work here because it will
				// be used as a numerical CSS variable.
				--dm-space: 0;

				// Compensate for `flex-basis: var(--dm-space)`; `min-width` does not measure `flex-basis`.
				// Only HStacks implement `min-width: min-content`.
				// Therefore VStacks implement `--dm-spacer-min-width: 0`.
				--dm-spacer-min-width: var(--dm-space);
			}
		}

		.hstack > * + * {
			@include mixins.variants($composed...) {
				margin-top: revert;
				margin-left: var(--dm-space);
			}
		}

		// Reference implementation: https://codepen.io/zaydek/pen/qBaYvWp.
		//
		// NOTE: Do not merge selectors because of `mixins.variants` implementation.
		// `mixin.variants` cannot process comma-delimited selectors yet.
		.hstack > .spacer:first-child:empty + * {
			@include mixins.variants($composed...) {
				margin-left: revert;
			}
		}
		.hstack > .spacer:empty {
			@include mixins.variants($composed...) {
				margin-left: revert;
			}
		}
		.hstack > .spacer:empty + * {
			@include mixins.variants($composed...) {
				margin-left: revert;
			}
		}
		.hstack > * + .spacer:last-child:empty {
			@include mixins.variants($composed...) {
				margin-left: revert;
			}
		}

		/*
		 * <vstack>
		 */

		// (Core)
		@if utils.matches($composed, core) {
			// prettier-ignore
			.vstack {
				justify-self: stretch;   // Stretch on the main-axis
				align-self: stretch;     // Stretch on the cross-axis

				display: flex;           // Use Flexbox
				flex-direction: column;  // Flexbox as column
				justify-content: center; // Center children along the main-axis
				align-items: center;     // Center children along the cross-axis

				// For `.overflow-x-scroll`.
				min-width: min-content;
			}
		}

		// (Responsive)
		@if not utils.matches($composed, core) {
			.vstack {
				@include mixins.variants($composed...) {
					flex-direction: column;
				}
			}
		}

		@if utils.matches($composed, core) {
			.vstack > * {
				// NOTE: `revert` does not work here because it will
				// be used as a numerical CSS variable.
				--dm-space: 0;

				// NOTE: `revert` does not work here because it will
				// be used as a numerical CSS variable.
				--dm-spacer-min-width: 0;
			}
		}

		.vstack > * + * {
			@include mixins.variants($composed...) {
				margin-left: revert;
				margin-top: var(--dm-space);
			}
		}

		// Reference implementation: https://codepen.io/zaydek/pen/qBaYvWp.
		//
		// NOTE: Do not merge selectors because of `mixins.variants` implementation.
		// `mixin.variants` cannot process comma-delimited selectors yet.
		.vstack > .spacer:first-child:empty + * {
			@include mixins.variants($composed...) {
				margin-top: revert;
			}
		}
		.vstack > .spacer:empty {
			@include mixins.variants($composed...) {
				margin-top: revert;
			}
		}
		.vstack > .spacer:empty + * {
			@include mixins.variants($composed...) {
				margin-top: revert;
			}
		}
		.vstack > * + .spacer:last-child:empty {
			@include mixins.variants($composed...) {
				margin-top: revert;
			}
		}

		/*
		 * <... space-*>
		 */

		// NOTE: Cannot use a generator because of the descendent selector..
		@each $rv in utils.list-of(get.nspaces(), get.spaces()) {
			.#{get.n($rv)}space-#{get.abs($rv)} > * {
				@include mixins.variants($composed...) {
					--dm-space: #{utils.rem($rv)};
				}
			}
		}

		/*
		 * <spacer>
		 */

		@if utils.matches($composed, core) {
			// Spacers are collapsible to `var(--dm-space)`.
			//
			// NOTE: `min-width: min-content` (from `.hstack`) does not measure `flex-basis: var(--dm-space)`.
			// Therefore use `min-width: var(--dm-spacer-min-width)`.
			.spacer {
				flex: 1 0 var(--dm-space);

				// For `.overflow-x-scroll`.
				min-width: var(--dm-spacer-min-width);
			}

			// Edge case spacers are collapsible to `0`.
			.spacer:first-child,
			.spacer:empty + .spacer:empty,
			.spacer:last-child {
				flex: 1 0 0;

				// For `.overflow-x-scroll`.
				min-width: 0;
			}
		}
	}

	// NOTE: Stacks take precedence over modifiers.
	@include -modifiers($variants...);
}
