@use "../configuration" as conf;
@use "../getters" as get;
@use "../mixins";
@use "../utils";

$-placement-opts: (
	all: (
		top: 0,
		right: 0,
		bottom: 0,
		left: 0,
	),
	top-all: (
		top: 0,
		right: 0,
		bottom: revert,
		left: 0,
	),
	right-all: (
		top: 0,
		right: 0,
		bottom: 0,
		left: revert,
	),
	bottom-all: (
		top: revert,
		right: 0,
		bottom: 0,
		left: 0,
	),
	left-all: (
		top: 0,
		right: revert,
		bottom: 0,
		left: 0,
	),
	top-right: (
		top: 0,
		right: 0,
		bottom: revert,
		left: revert,
	),
	bottom-right: (
		top: revert,
		right: 0,
		bottom: 0,
		left: revert,
	),
	bottom-left: (
		top: revert,
		right: revert,
		bottom: 0,
		left: 0,
	),
	top-left: (
		top: 0,
		right: revert,
		bottom: revert,
		left: 0,
	),
	top: (
		top: 0,
		right: revert,
		bottom: revert,
		left: revert,
	),
	right: (
		top: revert,
		right: 0,
		bottom: revert,
		left: revert,
	),
	bottom: (
		top: revert,
		right: revert,
		bottom: 0,
		left: revert,
	),
	left: (
		top: revert,
		right: revert,
		bottom: revert,
		left: 0,
	),
);

// This implementation was originally inspired by several works:
//
// - https://codepen.io/everdimension/pen/BaNpeWe
// - https://twitter.com/bdc/status/1245399999300558853
//
// Reference implementation: https://codepen.io/zaydek/pen/VwKxrQR.
@mixin zstack($variants...) {
	@include mixins.compose($variants) using ($composed) {
		@if utils.matches($composed, core) {
			// prettier-ignore
			.zstack {
				position: relative;       // Constrain children to the current bounding box
				display: grid;            // Use CSS Grid
				place-items: center;      // Center children along both axes
			}

			// prettier-ignore
			.zstack > * {
				grid-area: 1 / 1 / 1 / 1; // Self-center
				z-index: 10;              // Normalize appearance order for direct and indirect (e.g. `place-*`) children
			}
		}

		@each $mk, $mv in $-placement-opts {
			.place-#{$mk} {
				@include mixins.variants($composed...) {
					position: absolute;
					@each $prop, $value in $mv {
						#{$prop}: #{$value};
					}
				}
			}
		}
	}
}
