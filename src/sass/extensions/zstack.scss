@use "../configuration" as conf;
@use "../getters" as get;
@use "../mixins";
@use "../utils";

// prettier-ignore
$-opts: (
	top: (top),
	right: (right),
	bottom: (bottom),
	left: (left),
	top-right: (top, right),
	bottom-right: (bottom, right),
	bottom-left: (bottom, left),
	top-left: (top, left),
);

// Inspired by @everdimensionâ€™s implementation: https://codepen.io/everdimension/pen/BaNpeWe.
//
// Based on https://codepen.io/zaydek/pen/dypmZow.
@mixin zstack($variants...) {
	@include mixins.compose($variants) using ($composed) {
		@if utils.matches($composed, core) {
			.zstack {
				position: relative; // Takes precedence (for semantic reasons)
				display: grid;
				justify-items: center; // Simulates `place-items`
				align-items: center; // Simulates `place-items`
			}

			// Direct children refers to ZStack children.
			// Indirect children refers to ZStack children that use the placement API.
			.zstack > * {
				grid-row-start: 1;
				grid-column-start: 1;
				grid-row-end: 1;
				grid-column-end: 1;

				// NOTE: Use `z-index: 10` to normalize direct and indirect children.
				// Children should appear based on order, not based on the directness of children.
				// Using `z-index` for all children normalizes appearance order.
				z-index: 10;
			}
		}

		@each $mk, $mv in $-opts {
			.place-#{$mk} {
				@include mixins.variants($composed...) {
					position: absolute;
					@each $prop in $mv {
						#{$prop}: 0;
					}
				}
			}
		}
	}
}
