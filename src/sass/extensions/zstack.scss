@use "../configuration" as conf;
@use "../getters" as get;
@use "../mixins";
@use "../utils";

// prettier-ignore
$-opts: (
	all: (top, right, bottom, left),

	top-all: (top, left, right),
	right-all: (right, top, bottom),
	bottom-all: (bottom, left, right),
	left-all: (left, top, bottom),

	top-right: (top, right),
	bottom-right: (bottom, right),
	bottom-left: (bottom, left),
	top-left: (top, left),

	top: (top),
	right: (right),
	bottom: (bottom),
	left: (left),
);

// This implementation was originally inspired by several works:
//
// - https://codepen.io/everdimension/pen/BaNpeWe
// - https://twitter.com/bdc/status/1245399999300558853
//
// Reference implementation: https://codepen.io/zaydek/pen/VwKxrQR.
@mixin zstack($variants...) {
	@include mixins.compose($variants) using ($composed) {
		@if utils.matches($composed, core) {
			// prettier-ignore
			.zstack {
				--dm-display: grid;
				position: relative;       // Constrain children to the current bounding box
				display: grid;            // Use CSS Grid
				place-items: center;      // Center children along both axes
			}

			// prettier-ignore
			.zstack > * {
				grid-area: 1 / 1 / 1 / 1; // Self-center
				z-index: 10;              // Normalize appearance order for direct and indirect (e.g. `place-*`) children
			}
		}

		@each $mk, $mv in $-opts {
			.place-#{$mk} {
				@include mixins.variants($composed...) {
					position: absolute;
					@each $prop in $mv {
						#{$prop}: 0;
					}
				}
			}
		}
	}
}
