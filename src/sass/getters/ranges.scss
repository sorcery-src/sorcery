@use "../configuration" as conf;
@use "../utils";
@use 'sass:list';

// TODO: Add support for `bar`?
// Then we can have `bar` and `cap`.
@function -nrange($limit: null) {
	@if $limit {
		@return utils.cap(conf.$nrange, $limit);
	}
	@return conf.$nrange;
}

// TODO: Add support for `bar`?
// Then we can have `bar` and `cap`.
@function -range($limit: null) {
	@if $limit {
		@return utils.cap(conf.$range, $limit);
	}
	@return conf.$range;
}

@function nspaces() {
	@return -nrange(conf.$limit-nspace);
}

@function spaces() {
	@return -range(conf.$limit-space);
}

@function sizes() {
	@return -range(conf.$limit-size);
}

// NOTE: Bar from `8` to prevent generating useless classes.
@function font-sizes() {
	@return utils.bar(-range(conf.$limit-font-size), 8);
}

@function border-widths() {
	@return -range(conf.$limit-border-width);
}

@function border-radii() {
	@return -range(conf.$limit-border-radius);
}

// Ex: percent-range() > (0, 0.05, ...)
//
// TODO: `percent-range` should probably talk to
// conf and use a resolver name as a
// parameter to resolve units.
@function percent-range() {
	@return conf.$percent-range;
}

@function decimal-range($begin, $end) {
	$list: ();
	@each $range in conf.$percent-range {
		$list: list.append($list, $range * $end);
	}
	@return $list;
}
// decimal-range(0, 0.1); // -> (0, 0.01, 0.02, 0.025, 0.03, ...)
// decimal-range(0, 1);   // -> (0, 0.1, 0.2, 0.25, 0.3, ...)
// decimal-range(0, 10);  // -> (0, 1, 2, 2.5, 3, ...)
// decimal-range(0, 100); // -> (0, 10, 20, 25, 30, ...)
