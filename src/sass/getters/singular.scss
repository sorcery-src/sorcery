@use "sass:map";
@use "sass:string";

@use "../configuration" as conf;
@use "../utils";

@function -impl($getter-name, $map, $key) {
	$got: map.get($map, $key);
	@if not $got {
		@error "#{$getter-name}: no such key `$key`; $key=#{$key}";
	}
	@return $got;
}

@function weight($key) {
	@return -impl("weight", conf.$weight-map, $key);
}

@function font($key) {
	@return -impl("font", conf.$font-map, $key);
}

@function decoration($key) {
	@return -impl("decoration", conf.$decoration-map, $key);
}

@function color($key, $alpha: null) {
	// Normalize `currentColor` as `current`.
	@if $key == currentColor {
		$key: current;
	}

	// Edge case: cover `transparent` and `current`.
	$got: -impl("color", conf.$color-map, $key);
	@if $key == transparent or $key == current {
		@return $got;
	}

	// Convert from HEX to HSLA to support `var(--bg-opacity)`, etc.
	$raw-hsl: utils.color-to-raw-hsl($got);
	@if $alpha {
		@return string.unquote("hsla(#{$raw-hsl}, #{$alpha})");
	}
	@return string.unquote("hsl(#{$raw-hsl})");
}

@function shadow($key) {
	@if not utils.str-starts-with($key, "shadow-") {
		$key: "shadow-" + $key;
	}
	@return -impl("shadow", conf.$shadow-map, $key);
}

@function timing($key) {
	@return -impl("timing", conf.$timing-map, $key);
}

@function breakpoint($key) {
	@return -impl("breakpoint", conf.$breakpoint-map, $key);
}
