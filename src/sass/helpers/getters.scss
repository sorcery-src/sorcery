@use "sass:list";
@use "sass:map";
@use "sass:string";

@use "../configuration";

//
// Singular
//

@function -getter($getter-name, $map, $key) {
	$got: map.get($map, $key);
	@if not $got {
		@error "#{$getter-name}: no such key `$key`; $key=#{$key}";
	}
	@return $got;
}

@function weight($key) {
	@return -getter("weight", configuration.$weight-map, $key);
}

@function weight-var($key) {
	$_: -getter("weight-var", configuration.$weight-map, $key);
	@return var(--#{$key});
}

@function font($key) {
	@return -getter("font", configuration.$font-map, $key);
}

@function font-var($key) {
	$_: -getter("font-var", configuration.$font-map, $key);
	@return var(--#{$key});
}

@function raw-color($key) {
	@return -getter("raw-color", configuration.$color-map, $key);
}

// NOTE: Unexported.
@function -skeleton-color($key) {
	@return -getter("skeleton-color", configuration.$skeleton-color-map, $key);
}

// NOTE: Unexported.
@function -skeleton-color-var($key) {
	$_: -getter("skeleton-color-var", configuration.$font-map, $key);
	@return var(--#{$key});
}

// FIXME: Do we need `string.unquote(...)`?
@function color($key, $alpha: null) {
	$got: -getter("color", configuration.$color-map, $key);
	@if $alpha {
		@return string.unquote("hsla(#{$got}, #{$alpha})");
	}
	@return string.unquote("hsl(#{$got})");
}

// FIXME: Do we need `string.unquote(...)`?
@function color-var($key, $alpha: null) {
	@if $alpha {
		@return string.unquote("hsla(var(--#{$key}), #{$alpha})");
	}
	@return string.unquote("hsl(var(--#{$key}))");
}

@function decoration($key) {
	@return -getter("decoration", configuration.$decoration-map, $key);
}

@function decoration-var($key) {
	$_: -getter("decoration-var", configuration.$decoration-map, $key);
	@return var(--#{$key});
}

@function shadow($key) {
	@return -getter("shadow", configuration.$shadow-map, $key);
}

@function shadow-var($key) {
	$_: -getter("shadow-var", configuration.$shadow-map, $key);
	@return var(--shadow-#{$key});
}

@function timing($key) {
	@return -getter("timing", configuration.$timing-map, $key);
}

@function timing-var($key) {
	$_: -getter("timing-var", configuration.$timing-map, $key);
	@return var(--#{$key});
}

@function breakpoint($key) {
	@return -getter("breakpoint", configuration.$breakpoint-map, $key);
}

//
// Plural
//

@function weight() {
	$ret: ();
	@each $mk, $mv in configuration.$weight-map {
		$ret: map.set($ret, $mk, weight($mk));
	}
	@return $ret;
}

@function weight-vars() {
	$list: ();
	@each $mk, $mv in configuration.$weight-map {
		$list: list.append($list, weight-var($mk));
	}
	@return $list;
}

@function fonts() {
	$ret: ();
	@each $mk, $mv in configuration.$font-map {
		$ret: map.set($ret, $mk, font($mk));
	}
	@return $ret;
}

@function font-vars() {
	$ret: ();
	@each $mk, $mv in configuration.$font-map {
		$ret: map.set($ret, $mk, font-var($mk));
	}
	@return $ret;
}

@function raw-colors() {
	$ret: ();
	@each $mk, $mv in configuration.$color-map {
		$ret: map.set($ret, $mk, raw-color($mk));
	}
	@return $ret;
}

@function skeleton-colors() {
	$ret: ();
	@each $mk, $mv in configuration.$skeleton-color-map {
		$ret: map.set($ret, $mk, -skeleton-color($mk));
	}
	@return $ret;
}

@function skeleton-color-vars() {
	$ret: ();
	@each $mk, $mv in configuration.$skeleton-color-map {
		$ret: map.set($ret, $mk, -skeleton-color-var($mk));
	}
	@return $ret;
}

@function colors($alpha: null, $opts) {
	$subset: map.get($opts, subset);
	$ret: ();
	@each $mk, $mv in if($subset, configuration.$subset-color-map, configuration.$color-map) {
		$ret: map.set($ret, $mk, color($mk, $alpha));
	}
	@return $ret;
}

@function color-vars($alpha: null, $opts) {
	$subset: map.get($opts, subset);
	$ret: ();
	@each $mk, $mv in if($subset, configuration.$subset-color-map, configuration.$color-map) {
		$ret: map.set($ret, $mk, color-var($mk, $alpha));
	}
	@return $ret;
}

@function decorations() {
	$list: ();
	@each $mk, $mv in configuration.$decoration-map {
		$list: list.append($list, decoration($mk));
	}
	@return $list;
}

@function decoration-vars() {
	$list: ();
	@each $mk, $mv in configuration.$decoration-map {
		$list: list.append($list, decoration-var($mk));
	}
	@return $list;
}

@function shadows() {
	$list: ();
	@each $mk, $mv in configuration.$shadow-map {
		$list: list.append($list, shadow($mk));
	}
	@return $list;
}

@function shadow-vars() {
	$list: ();
	@each $mk, $mv in configuration.$shadow-map {
		$list: list.append($list, shadow-var($mk));
	}
	@return $list;
}

@function timings() {
	$list: ();
	@each $mk, $mv in configuration.$timing-map {
		$list: map.set($list, timing($mk));
	}
	@return $list;
}

@function timing-vars() {
	$list: ();
	@each $mk, $mv in configuration.$timing-map {
		$list: map.set($list, timing-var($mk));
	}
	@return $list;
}

// TODO: Change to `breakpoint-map()`?
@function breakpoints() {
	$ret: ();
	@each $mk, $mv in configuration.$breakpoint-map {
		$ret: map.set($ret, $mk, breakpoint($mk));
	}
	@return $ret;
}
