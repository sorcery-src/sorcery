@use "core/background-color" as *;
@use "core/border-color" as *;
@use "core/border-radius" as *;
@use "core/border-width" as *;
@use "core/box-shadow" as *;
@use "core/color" as *;
@use "core/grid" as *;
@use "core/height" as *;
@use "core/margin" as *;
@use "core/max-width" as *;
@use "core/meta/aspect-ratio" as *;
@use "core/meta/container" as *;
@use "core/meta/group" as *;
@use "core/meta/hidden" as *;
@use "core/meta/stacks" as *;
@use "core/min-height" as *;
@use "core/min-width" as *;
@use "core/opacity" as *;
@use "core/overflow" as *;
@use "core/padding" as *;
@use "core/pointer-events" as *;
@use "core/position" as *;
@use "core/transform" as *;
@use "core/transition" as *;
@use "core/typography/font-family" as *;
@use "core/typography/font-size" as *;
@use "core/typography/font-style" as *;
@use "core/typography/font-weight" as *;
@use "core/typography/letter-spacing" as *;
@use "core/typography/line-height" as *;
@use "core/typography/text-align" as *;
@use "core/typography/text-decoration" as *;
@use "core/typography/vertical-align" as *;
@use "core/typography/white-space" as *;
@use "core/width" as *;
@use "core/z-index" as *;

// NOTE: Dart Sass does not support dynamic mixin invocations.
//
// https://github.com/sass/sass/issues/626
//
// prettier-ignore
@mixin call-mixin($mixin, $variants...) {
	@if $mixin == "white-space" { @include typography.white-space($variants...); }
	@if $mixin == "text-align" { @include typography.text-align($variants...); }
	@if $mixin == "font-family" { @include typography.font-family($variants...); }
	@if $mixin == "vertical-align" { @include typography.vertical-align($variants...); }
	@if $mixin == "font-size" { @include typography.font-size($variants...); }
	@if $mixin == "letter-spacing" { @include typography.letter-spacing($variants...); }
	@if $mixin == "line-height" { @include typography.line-height($variants...); }
	@if $mixin == "font-style" { @include typography.font-style($variants...); }
	@if $mixin == "font-weight" { @include typography.font-weight($variants...); }
	@if $mixin == "text-decoration" { @include typography.text-decoration($variants...); }
	@if $mixin == "aspect-ratio" { @include aspect-ratio($variants...); }
	@if $mixin == "background-color" { @include background-color($variants...); }
	@if $mixin == "border-color" { @include border-color($variants...); }
	@if $mixin == "border-radius" { @include border-radius($variants...); }
	@if $mixin == "border-width" { @include border-width($variants...); }
	@if $mixin == "box-shadow" { @include box-shadow($variants...); }
	@if $mixin == "color" { @include color($variants...); }
	@if $mixin == "container" { @include container($variants...); }
	@if $mixin == "grid" { @include grid($variants...); }
	@if $mixin == "group" { @include group(/* No-op */); }
	@if $mixin == "height" { @include height($variants...); }
	@if $mixin == "hidden" { @include hidden($variants...); }
	@if $mixin == "margin" { @include margin($variants...); }
	@if $mixin == "max-width" { @include max-width($variants...); }
	@if $mixin == "min-height" { @include min-height($variants...); }
	@if $mixin == "min-width" { @include min-width($variants...); }
	@if $mixin == "opacity" { @include opacity($variants...); }
	@if $mixin == "overflow" { @include overflow($variants...); }
	@if $mixin == "padding" { @include padding($variants...); }
	@if $mixin == "pointer-events" { @include pointer-events($variants...); }
	@if $mixin == "position" { @include position($variants...); }
	@if $mixin == "stacks" { @include stacks($variants...); }
	@if $mixin == "transform" { @include transform($variants...); }
	@if $mixin == "transition" { @include transition($variants...); }
	@if $mixin == "width" { @include width($variants...); }
	@if $mixin == "z-index" { @include z-index($variants...); }
}
