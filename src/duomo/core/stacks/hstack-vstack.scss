@use "../../helpers" as *;

@use "sass:list";

$-align-opts: (
	align-stretch: stretch,
	align-start: flex-start,
	align-center: center,
	align-end: flex-end,
	align-baseline: baseline,
);

$-align-self-opts: (
	align-self-stretch: stretch,
	align-self-start: flex-start,
	align-self-center: center,
	align-self-end: flex-end,
	align-self-baseline: baseline,
);

// Based on https://codepen.io/zaydek/pen/XWjpqjQ.
@mixin hstack-vstack($variants...) {
	@include variants($variants...) using ($v) {
		/*
		 * <hstack>
		 */

		// NOTE: Use `min-(width|height)` for `overflow(-x|-y)?-scroll`.
		#{variant(hstack, $v)} {
			align-self: stretch;
			display: flex;
			flex-direction: row;
			justify-content: center;
			align-items: center;
			min-width: min-content;
		}

		@if matches($v, core) {
			// Resets `--space` to prevent propagation to nested stack contexts.
			.hstack > * {
				--dm-spacer-min-width: var(--space);
				--space: 0;
			}
		}

		// Polyfill Flexbox gap.
		#{variant(hstack, $v)} > * + * {
			margin-top: 0; // Reset
			margin-left: var(--space);
		}

		// `<spacer :empty>` and `<spacer :empty><element>` do not implement spacing.
		//
		// /////////////// <- Implements spacing
		// <element>
		// /////////////// <- Does not implement spacing
		// <spacer :empty>
		// /////////////// <- Does not implement spacing
		// <element>
		//
		#{variant(hstack, $v)} > .spacer:empty,
		#{variant(hstack, $v)} > .spacer:empty + * {
			margin-left: 0;
		}

		/*
		 * <vstack>
		 */

		// NOTE: Use `min-(width|height)` for `overflow(-x|-y)?-scroll`.
		#{variant(vstack, $v)} {
			align-self: stretch;
			display: flex;
			flex-direction: column;
			justify-content: center;
			align-items: center;
			min-width: auto; // Reset
		}

		@if matches($v, core) {
			// Resets `--space` to prevent propagation to nested stack contexts.
			.vstack > * {
				--dm-spacer-min-width: 0;
				--space: 0;
			}
		}

		// Polyfill Flexbox gap.
		#{variant(vstack, $v)} > * + * {
			margin-left: 0; // Reset
			margin-top: var(--space);
		}

		// `<spacer :empty>` and `<spacer :empty><element>` do not implement spacing.
		//
		// /////////////// <- Implements spacing
		// <element>
		// /////////////// <- Does not implement spacing
		// <spacer :empty>
		// /////////////// <- Does not implement spacing
		// <element>
		//
		#{variant(vstack, $v)} > .spacer:empty,
		#{variant(vstack, $v)} > .spacer:empty + * {
			margin-top: 0;
		}

		/*
		 * <spacer>
		 */

		// NOTE: Use `min-(width|height)` for `overflow(-x|-y)?-scroll`.
		// NOTE: `min-content` does not measure `flex-basis`.
		@if matches($v, core) {
			.spacer {
				flex: 1 0 var(--space);
				min-width: var(--dm-spacer-min-width);
			}
			.spacer:first-child,
			.spacer:empty + .spacer:empty,
			.spacer:last-child {
				flex: 1 0 0;
				min-width: 0;
			}
		}

		/*
		 * <... align-* align-self-*>
		 */

		// Escape hatch: `<hstack>` and `<vstack>` can simulate `align-items` and
		// `align-self` but requires more elements.
		//
		// `justify-content` and `justify-self` are not stamped out because
		// `<spacer>`s are preferred.
		//
		@each $mk, $mv in $-align-opts {
			#{variant($mk, $v)} {
				align-items: $mv;
			}
		}

		// Escape hatch: `<hstack>` and `<vstack>` can simulate `align-items` and
		// `align-self` but requires more elements.
		//
		// `justify-content` and `justify-self` are not stamped out because
		// `<spacer>`s are preferred.
		//
		@each $mk, $mv in $-align-self-opts {
			#{variant($mk, $v)} {
				align-self: $mv;
			}
		}

		/*
		 * <... space-*>
		 */

		@each $rv in var-join(nrange(), range()) {
			#{variant(#{n($rv)}space-#{abs($rv)}, $v)} > * {
				--space: #{rem($rv)};
			}
		}
	}
}
