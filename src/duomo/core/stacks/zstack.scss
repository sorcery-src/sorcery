@use "../../helpers" as *;

$-opts: (
	tl: (
		top: 0,
		left: 0,
	),
	t: (
		top: 0,
	),
	tr: (
		top: 0,
		right: 0,
	),
	l: (
		left: 0,
	),
	r: (
		right: 0,
	),
	bl: (
		bottom: 0,
		left: 0,
	),
	b: (
		bottom: 0,
	),
	br: (
		right: 0,
		bottom: 0,
	),
);

@mixin zstack($variants...) {
	@include variants($variants...) using ($v) {
		@if matches($v, core) {
			// prettier-ignore
			.zstack > * { --dm-display: initial; }

			// `<zstack>` is implemented using -- surprisingly -- CSS Grid.
			// CSS Grid enables children to be stacked (on top of each other) and centered.
			// When combined with `relative` / `absolute`, `<zstack>` can be faithfully simulated on the web.
			//
			// https://twitter.com/bdc/status/1245399999300558853?lang=en
			// https://codepen.io/everdimension/pen/BaNpeWe
			.zstack {
				--dm-display: grid;
				display: var(--dm-display);
				place-items: center;
				position: relative;
				> * {
					grid-area: 1 / 1 / 1 / 1;
				}
			}
		}

		@each $mk, $mv in $-opts {
			#{variant(place-#{$mk}, $v)} {
				position: absolute;
				@each $mk, $mv in $mv {
					#{$mk}: $mv;
				}
				z-index: 10;
			}
		}
	}
}
