@use "sass:list";
@use "sass:map";
@use "sass:string";

@use "../src/sass" as * with ($headless: true);

// TODO: Convert HSL back to RGB?

// Ex:
//
// has-suffix(16, px)   -> false
// has-suffix(16px, px) -> true
//
@function has-suffix($str, $end) {
	$str: "" + $str;
	$end: "" + $end;
	@return string.slice($str, 1 + string.length($str) - string.length($end)) == $end;
}

@mixin theme($theme-info) {
	$light: map.get($theme-info, light);
	$dark: map.get($theme-info, dark);
	$theme-transition: if(not map.get($theme-info, theme-transition), null, var(--theme-transition));

	$light-ast: parse-ast($light);
	$dark-ast: parse-ast($dark);

	:root {
		@each $mk, $mv in $light-ast {
			@each $info in $mv {
				--#{map.get($info, var)}: #{map.get($info, value)};
			}
		}
		transition: $theme-transition;
	}

	[data-theme="dark"] {
		@each $mk, $mv in $dark-ast {
			@each $info in $mv {
				--#{map.get($info, var)}: #{map.get($info, value)};
			}
		}
	}

	@each $mk, $mv in $light-ast {
		.#{$mk} {
			@each $info in $mv {
				#{map.get($info, property)}: var(--#{map.get($info, var)});
			}
			transition: $theme-transition;
		}
	}
}

$transitionable: (
	bg: background-color,
	border-color: border-color,
	box-shadow: box-shadow,
	color: color,
	fill: fill,
	opacity: opacity,
	stroke: stroke,
);

@function parse-ast($map) {
	$ast: ();
	@each $mk, $mv in $map {
		@each $tk, $tv in $transitionable {
			@if has-suffix($mk, $tk) {
				$n: string.index($mk, $tk);
				$key: string.slice($mk, 1, $n - 2); // TODO: Change for `--`?
				$list: map.get($ast, $key);
				$list: list.append(
					if(not $list, (), $list),
					(
						var: $mk,
						property: $tv,
						value: $mv,
					)
				);
				$ast: map.set($ast, $key, $list);
			}
		}
	}
	@return $ast;
}

$light: (
	fti-app-color: color(white),
	fti-app-bg: color(white),
	fti-app-shadow: (
		0 0 0 1px color(gray-200),
		shadow(xs),
		shadow(md),
	),
	fti-content-search-bar-bg: color(white),
	fti-content-card-bg: color(white),
	fti-sidebar-bg: color(white),
	fti-sidebar-preview-bg: color(white),
	fti-svg-color: color(black),
	fti-faded-svg-color: color(black, 0.5),
);

$dark: (
	fti-app-color: color(white),
	fti-app-bg: color(white),
	fti-app-shadow: (
		0 0 0 1px color(gray-200),
		shadow(xs),
		shadow(md),
	),
	fti-content-search-bar-bg: color(white),
	fti-content-card-bg: color(white),
	fti-sidebar-bg: color(white),
	fti-sidebar-preview-bg: color(white),
	fti-svg-color: color(black),
	fti-faded-svg-color: color(black, 0.5),
);

// prettier-ignore
@at-root {
	@include theme((
		light: $light,
		dark: $dark,
		theme-transition: true,
	));
}
