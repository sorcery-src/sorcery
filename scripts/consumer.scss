// @use "sass" as * with (
// 	$env: development,
// 	$macro-variants: (
// 		hover, focus, touch,
// 		group-hover, group-focus, group-touch,
// 	),
// );

@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

$env: "production";

// Ex:
//
// take((0, 1, 2, 4), 4)             -> (0, 1, 2)
// take((a: 0, b: 1, c: 2, d: 4), d) -> (a: 0, b: 1, c: 2)
//
@function take($collection, $item) {
	@if meta.type-of($collection) != list and meta.type-of($collection) != arglist and meta.type-of($collection) != map {
		@error "take: `$collection` is not a collection-type; " +
			"meta.type-of($collection)=#{meta.type-of($collection)}";
	}

	$ret: ();
	@if meta.type-of($collection) == list or meta.type-of($collection) == arglist {
		@each $each in $collection {
			@if $each != $item {
				$ret: list.append($ret, $each);
			}
		}
	} @else if meta.type-of($collection) == map {
		@each $mk, $mv in $collection {
			@if $mk != $item {
				$ret: map.set($ret, $mk, $mv);
			}
		}
	}
	@return $ret;
}

@function replace($str, $s1, $s2) {
	$n: string.index($str, $s1);
	@return string.slice($str, 1, $n - 1) + $s2 + string.slice($str, $n + string.length($s1));
}

// Ex: ".class" -> "class"
@function unclass($str-selector) {
	@return string.slice($str-selector, 2);
}

// Ex: ".sm\\: .class" -> ".sm\\:class"
@function conjoin($str-selector) {
	@return replace($str-selector, "\\: .", "\\:");
}

@function core($str-selector) {
	@return $str-selector;
}
@function hover($str-selector) {
	@return ".hover\\:#{unclass($str-selector)}:hover";
}
@function focus($str-selector) {
	@return ".focus\\:#{unclass($str-selector)}:focus";
}
@function touch($str-selector) {
	@return ".touch\\:#{unclass($str-selector)}:hover, .touch\\:#{unclass($str-selector)}:focus";
}
@function group-hover($str-selector) {
	@return ".group\:hover .#{unclass($str-selector)}";
}
@function group-focus($str-selector) {
	@return ".group\:focus .#{unclass($str-selector)}";
}
@function group-touch($str-selector) {
	@return ".group\:hover .#{unclass($str-selector)}, .group\:focus .#{unclass($str-selector)}";
}

@function delimiter() {
	@return "\\:";
}

@function responsive($str-selector) {
	$repl: replace(string.slice($str-selector, 2), "\\#{delimiter()} .", "\\#{delimiter()}");
	@return ".#{$repl}";
}

// @mixin variants-alt($variants...) {
// 	$str-selector: "" + &;
//
// 	@each $variant in $variants {
// 		@if $variant == core {
// 			@content;
// 		} @else if $variant == hover {
// 			@at-root {
// 				#{hover($str-selector)} {
// 					@content;
// 				}
// 			}
// 		}
// 	}
// }

// NOTE: Use `@at-root` to escape the current context.
@mixin prototype-dev($str-selector, $variants...) {
	#{$str-selector} {
		@content;
	}
	@at-root {
		@each $variant in $variants {
			$transformed: meta.call(meta.get-function($variant), $str-selector);
			#{$transformed} {
				@content;
			}
		}
	}
}

// NOTE: Use `@at-root` to escape the current context.
@mixin prototype-prod($str-selector, $variants...) {
	@at-root {
		$concat-transformed: $str-selector;
		@each $variant in $variants {
			$transformed: meta.call(meta.get-function($variant), $str-selector);
			$concat-transformed: $concat-transformed + ", " + $transformed;
		}
		#{$concat-transformed} {
			@content;
		}
	}
}

@mixin variants($variants...) {
	$taken: take($variants, responsive);
	@if list.length($taken) > 0 {
		@if $env == development {
			@include prototype-dev("" + &, $taken...) {
				@content;
			}
		} @else if $env == production {
			@include prototype-prod("" + &, $taken...) {
				@content;
			}
		}
	}
	// @if list.index($variants, responsive) {
	// 	@content (responsive);
	// }

	// 	} @else if $variant == responsive {
	// 		@at-root {
	// 			#{conjoin($str-selector)} {
	// 				@content;
	// 			}
	// 		}
	// 	}
	// }
}

.bg-red-500 {
	@include variants(hover, focus, touch, group-hover, group-focus, group-touch) {
		background-color: hsl(var(--red-500));
	}
}
